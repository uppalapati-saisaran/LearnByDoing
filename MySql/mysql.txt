1, how to find the 2nd highest salary?

select max(sal) from emp where sal not in (select max(sal) from emp);

select max(sal) from emp where sal < (select max(sal)) from emp); 

2, Department Wise Highest Salary 

select deptno,max(sal) from emp group by deptno;
select deptno,min(sal) from emp group by deptno; 

3, Number of employees in each deparatment.

select deptno,count(*) from emp group by deptno; 

4, Display alternate records 

select rownum,empno,sal,ename from emp;

select * from 
   (select empno, ename, sal, rownum as rn 
    from emp
	order by rn)
    where mod(rn,2) <> 0 
	
5, Find duplicated values and its frequency of a column.

select ename,count(*) from emp
group by ename having count(*) > 1;

select ename,count(*) from emp
group by ename order by count(*)

6, Pattern matching using like operator 

(a) Display the employee names whose name start with 'M'.

select ename from emp where ename like 'M%';

(b) Display the employee names whose name ends with 'N'.

select ename from emp where ename like '%N'; 

(c) Display the names of all employees having 'M' in any position in their name.

select ename from emp where ename like '%M%'

(d) Display the names of all employees whose name does not contain 'M' anywhere. 

select ename from emp where ename not like '%M%' 

Pattern matching 

1, Display names of all employees whose name contains exactly 4 letters.

select ename from emp where ename like '____' 

2, Display the names of employees whose name contains the (i) second letter as 'L' 
(ii) fourth letter as 'M' 

select ename from emp where ename like '_L%';
select ename from emp where ename like '___M%'; 

3, Display the employee names and hire dates for the employees joined in the month of december 

select hiredate,ename from emp where hiredate like '%DEC%'

4, Display the names of employees whose name contains exactly 2 'L's 

select ename from emp where ename like '%LL%';

5, Display the names of employees whose name starts with 'J' and ends with 'M'

select ename from emp where ename like 'J%M';


7, Display nth row in sql 

Disply the 4th row : - 

select * from emp where rownum<=4 
minus
select * from emp where rownum<=3 
// In the above apprach rownum cann't used with > or = operator. 

or 

select * from 
(select rownum r,ename, sal from emp)  ==> Display only selected columns 
where r = 4

or

select * from 
(select rownum r,emp.* from emp) ==> Display all the columns  
where r = 4 

or 

select * from
(select rownum r,emp.* from emp) ==> Display all the columns 
where r in (2,3,7);  ==> Only selected rows 

https://www.youtube.com/watch?v=k7rg4CARxD8&list=PLqM7alHXFySGweLxxAdBDK1CcDEgF-Kwx&index=7

8, 
union in dbms 
- union clause used to combine the result-set of two or more select queries.
- Applying union between single column
   select city from country1 union select city from country2 ==> if duplicate values present, it will display only once. 
- The columns used in all the select statments must have the following.
  - the same number of columns
  - similar or compatible data types.
  - same logical order 
- Selecting more than one column in the select query 
  - Whenever more than one column is specified in the select clause then the combination of all the columns considered that
    is if both the values in rows same then only this considered as a duplicate value
	
union all:
- union removes duplicate values while comparing where union all allows duplicate values when combining.
  select city from sample1
  union all
  select city from sample2  ==> Duplicates values are displayed.
  
9, Inner join 
- Based on the equality conditiion data is retrieved from multiple tables.
- we must have a common column in both the tables with the same data type.
- Right table row is joined with left table row only if there is a matching for the left table row in right table.
 
  select ename,sal,dept.deptno,dname,loc 
  from emp,dept 
  where emp.deptno=dept.deptno 
  
  select ename,sal,d.deptno,dname,loc 
  from emp e,dept d
  where e.deptno=d.deptno;  => With alias name 
  
  Display employees who are working in Location Chicago from emp and dept table. 
  
  select ename,sal,d.deptno,dname,loc 
  from emp,dept
  where e.deptno=d.deptno and LOC='CHICAGO'
  
  Display the department name and total salaries from each department 
  
  select dname,sum(sal) from emp e,dept d 
  where e.deptno=d.deptno 
  group by dname
 
10, Self join 
- What it does 
  - Joining a Table with itself is called self join.
  - Comparing values of a values with the values of same column itself or different column values of the same table.
  
  Display empolyee details who are getting more salary than their manager salary.
  
  select e1.ename "employees" e2.ename "manager"
  from emp e1,emp e2
  where e2.empno == e1.mgr ==> Display employee and his/her manager.
  
  select e1.enmae "employees", e2.ename "manager", e2.sal
  from emp e1,emp e2
  where e1.mgr = e2.empno and  e1.sal > e2.sal;
  

  Display the employee details who joined before their manager.
  
  select e1.ename "employees", e2.ename "manager",e2.sal,e2.
  from emp e1,emp e2 
  where e1.mgr = e2.empno and e1.hiredate < e2.hiredate 

  

*****************************************************************************************************************************************************

// create  a database 
CREATE database employee_db; 

// use a database
USE employee_db; 

// create a table 
create table employee_db(
    id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(100),
	department VARCHAR(50),
	salary DECIMAL(10,2),
	joining_date DATE
);

// insert dat 
INSERT INTO employees (name, department, salary, joining_date) 
values('sai saran','IT',75000,'2024-02-15');

// Update date 
UPDATE employees SET salary = 80000 where name = 'Sai Saran';

// Delete data 
Delete from employees where department = 'HR'

// Select all 
select * from employees;

//Filter with where:
select * from where department='IT' and salary > 60000;

// order results
select * from employees order by salary desc;

// limit results
select * from employees order by joining_date desc limit 5;

// total salary per department 
select department, sum(salary) as total salary from employees group by department

// count of employees
select count(*) from employees;

// joining employees with departments
select e.name,d.dept_namae 
from employee e 
join departments d on e.department = d.id 

// find employees joined this year 
select * from employees
where YEAR(joining_date) = YEAR(CURDATE())

// inner join
// Get employees names and their department names.  
select e.ename,d.dept_name
from employees e 
join department d on e.dept_id = d.id; 

// Left Join
// Get all employees even if they don't have a department 
select e.name, d.dept_name
from employees e 
left join departments d on e.dept_id = d.id 

// Right join
// Get all employees even if no employees are assigned
select e.name, d.dept_name 
from employees e 
right join departments d on e.dept_id = d.id 

// Stored procedure 
// Create a stored procedure to increase salary 
DELIMITER $$

CREATE PROCEDURE IncreaseSalary(IN emp_id INT, IN Increment DECIMAL(10,2))
BEGIN
  UPDATE employees
  SET salary = salary + increment 
  where id = emp_id;
END $$ 

DELIMITER;

CALL IncreaseSalary(1,5000);

****************************************************************************

Employees with salary above department average:

SELECT name,salary 
FROM employees e 
WHERE salary > ( 
SELECT AVG(salary) 
FROM employees 
WHERE dept_id = e.dept_id 
);


**********************************************************************************

Highest paid employees per department:

select dept_id, name, salary 
from employees e 
where salary = ( 
  select max(salary) from employee where dept_id = e.dept_id 
 );
 
 ********************************************************************************
 
Indexing and Query Optimization 

Why?
- Indexing improves the speed of searches, joins, and WHERE filters.
- Without indexes, queries scan the full table(slow) 

- Create a Sample Table 
CREATE TABLE employees(
     id INT PRIMARY KEy AUTO_INCREMENET,
	 name VARCHAR(100),
	 dept_id INT,
	 salary DECIMAL(10,2),
	 joining_date DATE
);

Now assume you have 100,000 employees and you run:

SELECT * FROM employees WHERE name = 'Sai Siran' 

Problem:
Without Index, MySQL scans all 100,000 rows line by line.

Add an Index :

CREATE INDEX idx_name ON employees(name);

What happens now?
MySQL creates a fast-lookup structure to quickly find rows with name 'Sai Siran'.

Check if Query Uses Index 

EXPLAIN SELECT * FROM employees WHERE name = "Sai Siran";

Excepted Output(simplied): |id|select_type|table|type|key | key_len|ref|rows| Extra |
                           |1 | SIMPLE | employees | ref | idx_name | 303 | const | 1 | Using where |
						   
You'll see output like this:
Key                   rows                Extra 
idx_name              1                   Using where 
						   
"key" column shows: idx_name is used -> Fast search!

Multi-Column Index :

If you often query:
SELECT * FROM employees WHERE name = "Sai Siran" AND dept_id = 2;

Create a multi-column index:
CREATE INDEX idx_name_dept employees(name, dept_id);

Best Pratices:
- Index columns used in WHERE,JOIN, or ORDER BY.
- Don't over-index (each index takes storage and slows inserts).
- Use explain to verify performance 



























